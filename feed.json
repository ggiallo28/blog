{
    "version": "https://jsonfeed.org/version/1",
    "title": "Gianluigi Mucciolo",
    "description": "",
    "home_page_url": "https://ggiallo28.github.io/blog",
    "feed_url": "https://ggiallo28.github.io/blog/feed.json",
    "user_comment": "",
    "author": {
        "name": "Gianluigi Mucciolo"
    },
    "items": [
        {
            "id": "https://ggiallo28.github.io/blog/cloudoformation-iac/",
            "url": "https://ggiallo28.github.io/blog/cloudoformation-iac/",
            "title": "Infrastructure as Code CloudFormation",
            "summary": " A presentation at Amazon Web Services User Group Rome in June 2020 In this session, I will talk about&hellip;",
            "content_html": "\n  <p class=\"align-center\">\n    A presentation at Amazon Web Services User Group Rome in June 2020\n  </p>\n\n  <p>\n    In this session, I will talk about AWS CloudFormation and its main features, advantages and disadvantages. I will discuss the YAML syntax, frameworks that run on top of AWS CloudFormation and last but not least, I'll talk about the ways you can extend CloudFormation functionality through Macros and Resource Providers.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva2-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva2-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva2-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva2-2-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 2</figcaption>\n    </figure>\n\n  <p>\n    AWS CloudFormation is a service that uses Infrastructure as Code to provision and manages a collection of related AWS and third-party resources.&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva3-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva3-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva3-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva3-2-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 3</figcaption>\n    </figure>\n\n  <p>\n    YAML syntax improves the readability of templates, this is a very common choice and is not a prerogative of AWS CloudFormation, Ansible and Kubernetes, for example, uses very similar syntax, moreover, the indentation is very familiar to Python programmers. \n  </p>\n\n  <p>\n    The JSON syntax instead is very useful for the automatic template generation thanks to&nbsp;<a href=\"https://jsonnet.org/\" target=\"_blank\">Jsonnet</a>, <a href=\"https://kapitan.dev/\" target=\"_blank\">Kapitan</a>,&nbsp;<a href=\"https://jinja.palletsprojects.com/en/2.11.x/\" class=\"\" target=\"_blank\">Jinja</a>&nbsp;or Python.\n  </p>\n\n  <p>\n    AWS provides the&nbsp;<a href=\"https://github.com/awslabs/aws-cfn-template-flip\" target=\"_blank\">cfn-template-flip</a>&nbsp;tool that allows you to flip JSON templates into YAML and vice versa along with the ability to perform optimizations,&nbsp;<a href=\"https://github.com/aws-cloudformation/cfn-python-lint\" target=\"_blank\">cfn-python-lint</a>&nbsp;can instead be used to perform syntax validation and template formatting. \n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva4-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva4-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva4-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva4-2-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 4</figcaption>\n    </figure>\n\n  <p>\n    The syntax of a CloudFormation template is very simple, this makes the tool very easy to use, however, to get the best from CloudFormation you need to know how Amazon Web Services works. If you are just getting started you can go very fast with CloudFormation and spent more time understanding Amazon Web Services.&nbsp;\n  </p>\n\n  <p>\n    Knowing an agnostic cloud tool will not make you a multi-cloud DevOps, instead, knowing AWS CloudFormation can help you to understand AWS best practices.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva5-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva5-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva5-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva5-2-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 5</figcaption>\n    </figure>\n\n  <p>\n    CloudFormation uses a declarative syntax. This means that everything in your template is a declaration of what should be in CloudFormation's state. Since you use resource attributes to declare your infrastructure you must store your conﬁguration in it.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva8-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva8-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva8-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva8-2-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 6</figcaption>\n    </figure>\n\n  <p>\n    When you launch an instance in Amazon EC2, you have the option of passing user data to the virtual machine to perform&nbsp;automated configuration tasks, but it is hard to declare a configuration in it because you will end on in doing a lot of shell programming which is not as reliable as conﬁguration&nbsp;management should be, instead AWS::CloudFormation::Init can be used.<br>\n  </p>\n\n  <p>\n    AWS::CloudFormation::Init is a way to provide&nbsp;metadata on an Amazon EC2 instance for the cfn-init helper script.&nbsp;The configuration is separated into sections.&nbsp;The cfn-init helper script processes the configuration sections&nbsp;in the following order: packages, groups, users, sources, files, commands, and then services but you can change the default order by using&nbsp;configsets.\n  </p>\n\n  <p>\n    A configset block consists of a configuration that specifies a set of actions to be performed on the machine, you can have many configset in the same init-resource. These include:&nbsp;\n  </p>\n\n  <ul>\n    <li><span style=\"color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);\"><strong>packages</strong>:&nbsp; to download and install pre-packaged applications and components.</span><br></li><li><span style=\"color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);\"><strong>groups</strong>: to create Linux/UNIX groups and to assign group IDs.<br></span></li><li><span style=\"color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);\"><strong>users</strong>: to create Linux/UNIX users on the EC2 instance.<br></span></li><li><span style=\"color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);\"><strong>sources</strong>: to download an archive file and unpack it in a target directory on the EC2 instance.&nbsp;</span></li><li><strong>files</strong>: to create files on the EC2 instance.</li><li><strong>commands</strong>: to execute commands on the EC2 instance.<br></li><li><strong>services</strong>: to define which services should be enabled or disabled at launch.<br></li>\n  </ul>\n\n  <p>\n    Let's try to make comparisons. User data give you greater control but for the file to parse as valid JSON/YAML code, any special characters such as double quotes must be escaped within the template, on the other hand, AWS::CloudFormation::Init is easiest to read, roll back automatically on failure, but give you less control.&nbsp;User data script is executed only when the virtual machine is&nbsp;launched while&nbsp;cfn-init can upgrade the machine without recreating the resource.<br>\n  </p>\n\n  <p>\n    The AWS::CloudFormation::Init block can be specified in the Metadata field in a virtual machine definition, UserData can be specified in the Properties field. You can provide both AWS::CloudFormation::Init and UserData at the same time.\n  </p>\n<pre class=\"line-numbers skip_translate code language-yaml\"><code>Resources: \n  Ec2Instance: \n    Type: AWS::EC2::Instance\n    Metadata: \n      AWS::CloudFormation::Init: \n        config: \n          packages: \n            :\n          groups: \n            :\n          users: \n            :\n          sources: \n            :\n          files: \n            :\n          commands: \n            :\n          services: \n            :\n    Properties: \n      UserData:\n        Fn::Base64:\n            !Sub |\n              #!/bin/bash -x\n              # Signal the status from instance\n              /opt/aws/bin/cfn-signal -e $? -r \"Build Process Complete\" '${WaitHandle}'\n      ImageId: 'ami-1234'</code></pre>\n\n  <p>\n    AWS::CloudFormation::WaitCondition can be used when you need to coordinate stack resource creation with configuration actions that are external to the stack creation or to track the status of a configuration process. You need to create also a WaitConditionHandle that returns a pre-signed URL you can use with cfn-signal to notify execution state to CloudFormation.\n  </p>\n<pre class=\"line-numbers skip_translate language-yaml\"><code>WaitHandle: \n  Type: AWS::CloudFormation::WaitConditionHandle\n  Properties: {}\n  \nWaitCondition: \n  Type: AWS::CloudFormation::WaitCondition\n  DependsOn: 'Ec2Instance'\n  Properties: \n    Handle: \n      Ref: \"WaitHandle\"\n    Timeout: '300'\n</code></pre>\n\n  <p>\n    Parameters allow you to create many stacks from the same template. A template is a specification of the AWS resources to be provisioned, a stack instead is a collection of AWS resources that have been created from a template.  You can write a generic template and control which resources to create into a stack by using parameters. For example, you can enable the high availability in production and disable it in the development environment. \n  </p>\n\n  <p>\n    Below is an example of an input parameter to a template. You can define constraints over length and type, you can use regular expressions to validate the input value.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva6-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva6-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva6-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva6-2-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 7</figcaption>\n    </figure>\n\n  <p>\n    Rules allow you to define constraints over different parameters, these constraints can also be used to define best practices. \n  </p>\n\n  <p>\n    In the below example we can recognize two rules, one check that m1.small machine is used in the test environment, another ensures that m1.large machine is used in production. \n  </p>\n\n  <p>\n    Templates in which best practices are defined can be made available as products in AWS Catalog. This allows developers to create a compliant infrastructure, you can prevent any change to the template by using IAM policies. \n  </p>\n<pre class=\"line-numbers skip_translate language-yaml\"><code>Rules:\n  testInstanceType:\n    RuleCondition:\n      Fn::Equals:\n      - Ref: Environment\n      - test\n    Assertions:\n    - Assert:\n        Fn::Contains:\n        - - m1.small\n        - Ref: InstanceType\n      AssertDescription: For the test environment, the instance type must be m1.small\n  prodInstanceType:\n    RuleCondition:\n      Fn::Equals:\n      - Ref: Environment\n      - prod\n    Assertions:\n    - Assert:\n        Fn::Contains:\n        - - m1.large\n        - Ref: InstanceType\n      AssertDescription: For the prod environment, the instance type must be m1.large</code></pre>\n\n  <p>\n    Outputs are the return values of your CloudFormation template, they can be exported and then used in another template. The exported name must be unique in the region, it can be imported into any CloudFormation template of the same region. When you use ImportValue intrinsic function only the value is imported not the whole state.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva7.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva7-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva7-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva7-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 8</figcaption>\n    </figure>\n\n  <p>\n    Mappings allow you to create generic templates, and define a complex configuration using a key-value map. For example, you can have a region-independent template as it is shown in the below slide. As you know each AMI has an identifier valid in a given region, Mappings allows you to specify for each region which AMI id to use.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva9-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva9-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva9-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva9-2-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 9</figcaption>\n    </figure>\n\n  <p>\n    CloudFormation fully manages the infrastructure state, it manages concurrent state changes and the resources creation, update and deletion. \n  </p>\n\n  <p>\n    You can create change-sets and have a full overview of the operations that will be performed during the execution of the template. In case of an error, the system rollbacks the infrastructure to the last working state. \n  </p>\n\n  <p>\n    CloudFormation has a Drift Detection feature that gives you the capability to discovery out-of-band changes in your infrastructure, it does not perform reconciliation.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva10-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva10-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva10-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva10-2-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 10</figcaption>\n    </figure>\n\n  <p>\n    CloudFormation has a very large ecosystem, there are many tools and framework build on top of CloudFormation. Also, thanks to AWS's strong focus on backwards compatibility there are many ready-to-use CloudFormation templates, so you rarely have to start from scratch. This greatly reduces time to market.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva11-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva11-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva11-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva11-2-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 11</figcaption>\n    </figure>\n\n  <p>\n    StackSets feature gives you the capability to create, update, or delete stacks across multiple accounts and regions with a single operation. This feature is useful for those organizations that need to manage hundreds of accounts, to deploy global infrastructures or disaster recovery.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva12.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva12-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva12-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva12-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 12</figcaption>\n    </figure>\n\n  <p>\n    Below are the advantages and disadvantages of using CloudFormation:\n  </p>\n\n  <p>\n    Advantages:\n  </p>\n\n  <ul>\n    <li><strong>stack sets</strong>: allow you to have multi-account and multi-region deployments;</li><li><strong>ui debugging</strong>: you can use the GUI to perform debugging activities;</li><li><strong>runs in the cloud</strong>: operations are performed even in case of network issues;</li><li><strong>ecosystem</strong>: you can use many tools and frameworks to meet your needs;</li><li><strong>tons of examples</strong>: you will never start from scratch;</li><li><strong>cross-referencing</strong>: you can reference value without to import the whole state;</li><li><strong>custom resources</strong>: you can extend CloudFormation capabilities with AWS Lambda;</li><li><strong>rollback</strong>: restore the last working state when an error occurs, improves resilience and reduces down-time;</li><li><strong>macros</strong>: allows you to define transformations that can be applied to the template;</li><li><strong>resource provider</strong>: allows you to create third-party resources.<br></li>\n  </ul>\n\n  <p>\n    Disadvantages:\n  </p>\n\n  <ul>\n    <li><strong>confused cli</strong>: Wrappers/Makefile are usually used to avoid commands with many parameters, you can also use the GUI or SDK to deploy your stacks;</li><li><strong>no reconciliation</strong>: although it gives you the ability to detect changes out of state, it does not restore them;</li><li><strong>no open-source</strong>: you cannot contribute to CloudFormation's core capability, it has a plug-and-play capability that gives you the ability to extend the functionality by using AWS Lambda functions;</li><li><strong>no modules</strong>: you can import existing templates from Amazon S3 and create a Nested Stack, but you cannot import a template as a module from a git repository;</li><li><strong>verbose</strong>: the result template has many repetitions, this because of missing modules;</li><li><strong>no programmable</strong>: you cannot use software constructs, it is more Infrastructure as Text than Infrastructure as Code;<br></li>\n  </ul>\n\n  <p>\n    AWS Specific vs Not Multi-Cloud. CloudFormation is not generally used as a multi-cloud tool, although you can use it as such. I think there are advantages and disadvantages to using a multi-cloud tool or native-cloud one.\n  </p>\n\n  <p>\n    Native-tools have better integration with the system for which are designed - CloudFormation, for example, is integrated with others services such as AWS Catalog, AWS Lambda, you can ask AWS Support to inspect your templates - on the other hand, a multi-cloud tool allows you to design the whole infrastructure by avoiding Frankenstein solution. I am therefore very excited about the announcement of CloudFormation Providers and third-party resources support. \n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva13.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva13-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva13-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva13-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 13</figcaption>\n    </figure>\n\n  <p>\n    The advantages and disadvantages in the previous slide are from the IaC community, actually thanks to features such as custom resources, macros and resource provider many of the drawbacks no longer apply, or almost apply. \n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva14.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva14-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva14-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva14-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 14</figcaption>\n    </figure>\n\n  <p>\n    Macros enable you to perform custom processing on templates. First, you need to create the macro itself, and then you can use the macro to perform your transformations.\n  </p>\n\n  <p>\n    To create a macro definition, you need to define the following:\n  </p>\n<pre class=\"line-numbers skip_translate language-yaml\"><code>Transform: AWS::Serverless-2016-10-31\n\nResources:\n  MacroFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: python3.6\n      CodeUri: source/\n      Handler: macro.handler\n      Role: !GetAtt TransformExecutionRole.Arn\n      Timeout: 300\n\n  Macro:\n    Type: AWS::CloudFormation::Macro\n    Properties:\n      Name: MyCustomMacro\n      FunctionName: !GetAtt MacroFunction.Arn</code></pre>\n\n  <p>\n    Whereas you can see there is an AWS Lambda function&nbsp;to perform the template processing and a resource of type AWS::CloudFormation::Macro, which enables users to call the Lambda function from within AWS CloudFormation templates.\n  </p>\n\n  <p>\n    If you need to process a section, or snippet, of a template, reference the macro in a Fn::Transform function located relative to the template content you want to transform, instead if you need process an entire template, reference the macro in the Transform section of the template.&nbsp;\n  </p>\n\n  <p>\n    The previous snipped for example uses AWS::Serverless-2016-10-31 transform to create MyCustomMacro.<br>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva15.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva15-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva15-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva15-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 15</figcaption>\n    </figure>\n\n  <p>\n    CloudFormation does not have native support for modules, that's why I have created the Template Macro. \n  </p>\n\n  <p>\n    Template Macro adds the ability to create CloudFormation resources from existing templates, you can reuse your configurations and manage a group of related resources as if they were a single resource. Check the&nbsp;<a href=\"https://github.com/ggiallo28/aws-cloudformation-macros/blob/master/Template/README.md\" class=\"\" target=\"_blank\">Template Macro docs</a>&nbsp;if you need further informations.&nbsp;\n  </p>\n\n  <p>\n    Below a Virtual Private Cloud with two private and public Subnets is created, together with a NAT Gateway, NACLs, Security Groups, an Internet Gateway, Route Tables and so on, all this in a single resource. \n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva16.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva16-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva16-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva16-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 16</figcaption>\n    </figure>\n\n  <p>\n    CloudFormation does not have by default the capability to use any software constructs, that's  why I have created the Troposphere Macro. \n  </p>\n\n  <p>\n    Troposphere Macro adds the ability to define your infrastructure by using Python language in a CloudFormation template, you can use if-then-else, for-loops and so on. Check <a href=\"https://github.com/ggiallo28/troposphere/blob/macro/macro/README.md\" class=\"\" target=\"_blank\">Troposphere Macro docs</a> if you need further information.&nbsp;\n  </p>\n\n  <p>\n    In the below example four virtual machines are created by looping over a list of names.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva17.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva17-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva17-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva17-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 17</figcaption>\n    </figure>\n\n  <p>\n    There are more AWS CloudFormation macros you can use, please check <a href=\"https://github.com/aws-cloudformation/aws-cloudformation-macros/blob/master/README.md\" target=\"_blank\">Macro Repository</a>&nbsp;if&nbsp;you need further information. \n  </p>\n\n  <ul>\n    <li><strong>Count</strong> macro allows you to specify multiple resources of the same type.</li><li><strong>PyPlate</strong> macro allows you to run arbitrary python code in your CloudFormation templates.<br></li><li><strong>Boto3</strong> macro adds the ability to call AWS API using boto3.<br></li><li><strong>AWS::Serverless</strong> is a macro to use <a href=\"https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html\" target=\"_blank\">AWS Serverless Application Model (AWS SAM)</a>.<br></li>\n  </ul>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva18.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva18-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva18-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva18-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 18</figcaption>\n    </figure>\n\n  <p>\n    By using the AWS CloudFormation Registry, you can submit, discover, and manage resource providers,&nbsp;it can be used to manage third party resources in the same way as native AWS resource providers.\n  </p>\n\n  <p>\n    To create third-party resources in your infrastructure you need to execute cfn-init-command and provide the name of your resource type, then it asks for the language to use in code generation and finally, it initializes the project by using docker environment.\n  </p>\n\n  <p>\n    Resource providers are treated as first-class citizens within CloudFormation; you can use CloudFormation capabilities to create, provision, and manage these custom resources in a safe and repeatable manner, just as you would any AWS resource.&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva19.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva19-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva19-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva19-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 19</figcaption>\n    </figure>\n\n  <p>\n    If you have any questions please use the comments section. \n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/13/Diapositiva20.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva20-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva20-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/13/responsive/Diapositiva20-md.png 768w\"  height=\"1080\" width=\"1920\" alt=\"\" />\n      <figcaption>Slide 20</figcaption>\n    </figure>",
            "image": "https://ggiallo28.github.io/blog/media/posts/13/Diapositiva1-2.png",
            "author": {
                "name": "Gianluigi Mucciolo"
            },
            "tags": [
                   "Talks"
            ],
            "date_published": "2020-06-23T20:49:48+02:00",
            "date_modified": "2020-06-23T20:49:48+02:00"
        },
        {
            "id": "https://ggiallo28.github.io/blog/create-a-personal-website/",
            "url": "https://ggiallo28.github.io/blog/create-a-personal-website/",
            "title": "Create a Personal Website",
            "summary": "The Serverless infrastructure behind a static web site. Do you want make it yours? You can start from here. Having&hellip;",
            "content_html": "<p>The Serverless infrastructure behind a static web site. Do you want make it yours? You can start from here. </p>\n<hr>\n<h4 id=\"0887\" class=\"fs ft ct bj fu b fv fw fx fy fz ga gb gc gd ge gf gg gh gi gj gk\">Why you need a personal website.</h4>\n<p>Having a personal website is the new portfolio, a new way to introduce yourself, it is a requirement for people to trust you. Relevant content can help you to get your dream job.</p>\n<p>Having a personal website gives you leverage to promote your content, share your knowledge. People are continuously looking for solutions to their problems, they search, read, comment, and can share your articles from any part of the world.</p>\n<p>Having a personal website gives you a platform to share your idea. If you did a good job anyone can find and know more about you. It requires a bit of work to optimize Search Engine Optimization (SEO) and make your website available on Google, but you will get an enormous satisfaction. You can test your SEO score by using <a href=\"https://analytics.google.com/analytics/web/provision/#/provision\" target=\"_blank\" rel=\"noopener noreferrer\">Google Analytics </a> or <a href=\"https://it.seotesteronline.com/\" target=\"_blank\" rel=\"noopener noreferrer\">SEO Tester Online</a> for example but there are many others.</p>\n<p>You can comment on this article to say what you think.</p>\n<hr>\n<h4>Decision focused on two alternatives.</h4>\n<p>A Personal Website can be created in many different ways, but in most of cases you need a specialized technical knowledge, that's why a content management system, most often referred to as a CMS, is needed to allow individuals and businesses to edit, manage, and maintain existing website pages in a single interface.</p>\n<p>Until today WordPress is the most popular CMS, so I started doing some research to figure out best practices to deploy a WordPress infrastructure on AWS, and I have found that something like this is needed:</p>\n<figure class=\"post__image\" ><img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/10/wordpress-on-aws-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/10/responsive/wordpress-on-aws-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/10/responsive/wordpress-on-aws-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/10/responsive/wordpress-on-aws-2-md.png 768w\"  alt=\"WordPress: Best Practices on AWS\" width=\"1562\" height=\"746\">\n<figcaption ><a href=\"https://aws.amazon.com/it/blogs/architecture/wordpress-best-practices-on-aws/\">WordPress: Best Practice on AWS</a><a></a></figcaption>\n</figure>\n<p>The proposed solution looked to be very expensive, there are bunches of servers here, many of them are useless, at least for my use-case.</p>\n<p>That's why I finally decided to use Publii.</p>\n<blockquote>\n<h4 class=\"align-center\">Publii is new Static CMS with GUI to build an extremely safe, fast and stylish HTML website.</h4>\nPublii is a static-website-building tool for every skill level, from beginner to developer.</blockquote>\n<h4><strong>How Publii works.</strong></h4>\n<p>Publii does not work in the same way as other CMS, you don't need to buy hosting, upload CMS files and install it directly in the server. What this means is that in traditional CMS everything related to your website is run on the server, you need to install and configure tools and plugins, you must be connected to the internet to create new contents. By using Publii you can styling and creating content for your site offline on your desktop, you don't need to install anything but the Publii client. </p>\n<h4><strong>Here are your action shortcuts to get a site using Publii:</strong></h4>\n<h5 id=\"bf65\" class=\"jg jh ds as ar ji jj jk jl jm jn jo jp jq jr js jt\">Part I: Install Publii on your OS.</h5>\n<p>You can get your Publii installer from the <a href=\"https://getpublii.com/download/\">download page</a>. I used Mac OS environment, but Publii is also available for Windows and Linux. </p>\n<p>The Publii client is the only thing that you need, no need to install plugins or configure anything else, you can download the installer, install it, and start using the client. </p>\n<h5 id=\"bf65\" class=\"jg jh ds as ar ji jj jk jl jm jn jo jp jq jr js jt\">Part II: Create a WebSite using Publii Client.</h5>\n<p>The first time you run Publii it ask you to create a new website, here you have to provide your website name and the author name that is used to create the author page. You can add more authors later.</p>\n<figure class=\"post_center_image\" ><img loading=\"lazy\" src=\"https://getpublii.com/docs/media/posts/49/creating-new-website.svg\" data-is-external-image=\"true\"  alt=\"Creating a new Publii WebSite\" width=\"1562\" height=\"746\">\n<figcaption >Creating a new Publii WebSite</figcaption>\n</figure>\n<p>You can create as many sites as you want, click on the current site name on the top left in the Publii Client, it gives you the full list of pages you have and a big \"Add new WebSite\" button. Click on the button to create a new site or use the list of pages to switch to a different page. </p>\n<h5>Part III: Select a Theme for your Blog.</h5>\n<p>You can get your Publii Theme from the <a href=\"https://marketplace.getpublii.com/\">marketplace page</a>. There are many templates you can use, more will come in the future, many of them are free to use. </p>\n<p>Once you have selected your favorite theme, hit download to get the zip file. To install a new theme navigate to the themes page by clicking on the three dots in the top-right of the Publii client, then clicking the themes option and Install theme as it is shown in the image.</p>\n<figure class=\"post_center_image\" ><img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/10/Schermata-2020-06-08-alle-22.56.41.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/10/responsive/Schermata-2020-06-08-alle-22.56.41-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/10/responsive/Schermata-2020-06-08-alle-22.56.41-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/10/responsive/Schermata-2020-06-08-alle-22.56.41-md.png 768w\"  alt=\"Install a Publii Theme\" width=\"1562\" height=\"746\">\n<figcaption >Install a Publii Theme</figcaption>\n</figure>\n<p>You can click on \"Get more themes\" to be redirected on the marketplace page.</p>\n<h5>Part IV: Write your first Blog Post.</h5>\n<p>To begin creating a post you can click on the posts option in the left-sidebar to be taken to the posts screen. The first time you do this you'll be presented with a choice of three different already build-in editors that you can use to create your first post; a Block Editor, a Markdown Editor, and a WYSIWYG Editor. </p>\n<figure class=\"post_center_image\"><img loading=\"lazy\"  src=\"https://getpublii.com/docs/media/posts/41/editors.svg\" data-is-external-image=\"true\"  alt=\"Initial post screen with choice of editors\"></figure>\n<p>Every time you create a new post you can choose which editor to use, each one has its advantages and disadvantages. For example, I use Block Editor to share slides about a speech, Markdown Editor to create a README description of a project, and WYSIWYG Editor to create a discursive post like this one.</p>\n<figure class=\"post_center_image post__image--center\" ><img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/10/Schermata-2020-06-23-alle-00.10.01-2.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/10/responsive/Schermata-2020-06-23-alle-00.10.01-2-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/10/responsive/Schermata-2020-06-23-alle-00.10.01-2-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/10/responsive/Schermata-2020-06-23-alle-00.10.01-2-md.png 768w\"  alt=\"\">\n<figcaption >Example of WYSIWYG Editor</figcaption>\n</figure>\n<p>Each post has its configuration. You can select the Featured image, add tags, update the SEO configuration, together with other options like having or not the comments section.</p>\n<h5>Part V: Publish your Blog.</h5>\n<p>When you are ready to go live you have to select the remote server, and perform deploy on it. </p>\n<p>Publii includes support for traditional FTP and SFTP server, as well as for multiple Cloud-Hosting Solutions, there is also an option for Manual Deployment, which exports the website files to your local machine.</p>\n<p>The remote server configuration is related on your selected option, I used Amazon S3 on Amazon Web Services. </p>\n<p>When you are ready to go live you'll just need to hit the \"Sync Your Website\" button in the bottom-left of the Publii app. After that you have basically done.</p>\n<figure class=\"post_center_image\"><img loading=\"lazy\"  src=\"https://ggiallo28.github.io/blog/media/posts/10/Schermata-2020-06-08-alle-23.00.57.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/10/responsive/Schermata-2020-06-08-alle-23.00.57-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/10/responsive/Schermata-2020-06-08-alle-23.00.57-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/10/responsive/Schermata-2020-06-08-alle-23.00.57-md.png 768w\"  alt=\"\" width=\"2880\" height=\"1800\"></figure>\n<h5>Part VI: (Optional) Make your configuration portable.</h5>\n<p>If you plan to work at the same website from different workstation you can synchronize your configuration with Dropbox. Here you can found the <a href=\"https://getpublii.com/docs/publii-on-multiple-computers-via-dropbox.html\" target=\"_blank\" rel=\"noopener noreferrer\">official documentation</a> that instructs you on how to do this. </p>\n<p>After installation Publii will store its files into a location on your computer, which will differ depending on whether you are using Windows, Linux or MacOS:</p>\n<ul>\n<li><strong>Windows</strong> stores the configuration in <code>C:\\Users\\USER NAME\\Documents\\Publii</code></li>\n<li><strong>MacOS</strong> stores the configuration in <code>/Applications/Publii</code></li>\n<li><strong>Linux</strong> stores the configuration in <code>/opt/Publii/resources/app/</code></li>\n</ul>\n<p>So, regardless of what method you are using to share your configuration, the only thing you need to do is:</p>\n<ol>\n<li>upload somewhere the Publii configuration;</li>\n<li>sync your data with the target workstation:</li>\n<li>create a page that has the same name as the one you are trying to import. </li>\n</ol>\n<h4>How the infrastructure of this web site looks like.</h4>\n<p>This website has a full Serverless infrastructure. Serverless allows you to build and run applications and services without thinking about servers. This lets you focus on your application code instead of worrying about provisioning, configuring, and managing servers. You only need to configure services together and upload your application code. There is no software or runtime to install, maintain, or administer.</p>\n<p>Below are the reasons and requirements for the proposed solution:</p>\n<ul>\n<li>Do not manage servers and installations, do not pay for unused resources;</li>\n<li>Versioning, Continuous Integration and Delivery of the code;</li>\n<li>Make available personal Resume both in PDF and HTML format;</li>\n<li>Avoid using CSS, HTML and any related specialized technical knowledge;</li>\n<li>Have an extensible solution.</li>\n</ul>\n<p>A diagram of the proposed solution is presented below:</p>\n<figure class=\"post_center_image\"><img loading=\"lazy\"  src=\"https://ggiallo28.github.io/blog/media/posts/10/StaticWebSite.svg\" alt=\"\" width=\"654\" height=\"641\"></figure>\n<h5>There Environments</h5>\n<p>There are three environments: development, stage, and production.</p>\n<p>Development environment is on my computer. Here is where I do all of my code updates and perform preliminary testing. I release the code when it works locally.</p>\n<p>Stage environment is very similar to the production environment, in this case all of the code is on the Amazon S3 bucket instead of my local machine. All of the hard core testing happens here. The stage environment help me find and fix any issues that come up.</p>\n<p>Production is for live code, is where users can access the final code after all of the updates and testing. Of all the environments, this is the most important one.</p>\n<h5>CI/CD Pipeline</h5>\n<p>The CI/CD pipeline helps me automate steps in my software delivery process, such as initiating code builds, running automated tests, and deploying to a stage or production environment.</p>\n<p>In this case I use Code Pipeline and Code Build in order to automate the process of Personal Resume generation. Personal Resume is automatically generated from YAML configuration file in both HTML and PDF format. The pipeline generates the final result from a Jekyll Template.</p>\n<h5>Public Domain</h5>\n<p>Amazon Route 53 is a highly available and scalable cloud Domain Name System (DNS) web service. I got the domain name directly from Amazon Route 53, but you can also transfer the registration for existing domains from other registrars to Route 53.</p>\n<h6>Remote Server Configuration</h6>\n<p>Publii let you to use Amazon S3 as remote server to host your static website, please read the <a href=\"https://getpublii.com/docs/setup-static-website-hosting-amazon-s3.html\" target=\"_blank\" rel=\"noopener noreferrer\">official documentation</a> for the step by step configuration. </p>\n<p>Amazon S3 is object-level storage that allows you to store as much data as you want. When an object being uploaded to or deleted from a specific bucket an event notifications is send. I used those notifications to trigger an AWS Lambda scripts that translates the whole website by using Amazon Translate. Publii does not have multi-language support for post content.</p>\n<h5>Publii</h5>\n<p>Publii is used for content generation. Publii Client is installed on my local machine and it already has everything is needed to develop the website, you don't need to install anything else.</p>\n<p>Publii integrates Disqus for comments to posts, and google search for the content search component. </p>\n<p>The configuration of Publii is synchronized with Github, git allows me to version the code and to work from different workstations.</p>\n<h5>CloudFront</h5>\n<p>Amazon CloudFront is a content delivery network (CDN), placed in front of Amazon S3 to deliver the assets and to improve the website performance. </p>\n<p>You can create a distribution by using Amazon S3 as origin, in this case, the traffic generated between the service and CloudFront does not introduce any additional fee, and it enables secure connection over https, http to https redirect, gzip content compression and so on.</p>\n<p>This is the most expensive component. I used Class 100 as pricing class, it uses only edges location placed in USA and Europe to serve the contents instead of whole global edge locations. This configurable option lets you reduce your delivery prices by excluding more expensive edge locations.</p>\n<h4>How WebSite looks like using Infrastructure as Code</h4>\n<p>As you may already know I love to Automate things. Below you can find the whole infrastructure as code you can use to replicate the whole website.</p>\n<p>Here you can find the <a href=\"https://github.com/ggiallo28/publii-website/tree/master/cloudformation/hosting\">CloudFormation template</a> related to the Publii infrastructure, it creates Amazon S3 Buckets, AWS Lambda functions, and Amazon CloudFront distribution, and the Record Sets in Amazon Route 53. I have created a Makefile that you can use for deploy. Before doing <code>make deploy ENV=stage</code> or <code>make deploy ENV=production</code> you have to update parameters file in envs folder. You must already have your domain name, an HTTPS Certificate in Nord Virginia Region, and an Amazon Translate Custom Terminology.</p>\n<p>Personal Resume is created using a Jekyll Template, you can find it in the <a href=\"https://github.com/ggiallo28/online-cv\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Repository</a>. I have created a Makefile that you can use for deploy. Before doing <code>make pipeline</code> you have to update BucketNames parameters, you can use those that are created during Publii infrastructure creation, and Sites parameters in the cloudformation.json file.</p>\n<h4>How much it cost</h4>\n<figure class=\"post_center_image\"><img loading=\"lazy\"  src=\"https://ggiallo28.github.io/blog/media/posts/10/us-dollar-bills-illustration-545864205-57aa68603df78cf459d43e43.jpg\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/10/responsive/us-dollar-bills-illustration-545864205-57aa68603df78cf459d43e43-xs.jpg 300w ,https://ggiallo28.github.io/blog/media/posts/10/responsive/us-dollar-bills-illustration-545864205-57aa68603df78cf459d43e43-sm.jpg 480w ,https://ggiallo28.github.io/blog/media/posts/10/responsive/us-dollar-bills-illustration-545864205-57aa68603df78cf459d43e43-md.jpg 768w\"  alt=\"\" width=\"533\" height=\"400\"></figure>\n<p>In the proposed infrastructure these are the main cost items:</p>\n<ul>\n<li>CI/CD Pipeline, consisting of Code Pipeline and Code Build, cost about 1$/month only if the pipeline is executed, otherwise the cost is zero if the pipeline is never executed in a month.</li>\n<li>Amazon S3 storage has a monthly cost of $0.023 per GB, practically zero since it is a static site.</li>\n<li>WebSite requests have a monthly cost of $0.0004 per 1000 requests, zero if no one visits the site. This value reduced a lot because of the caching of the CloudFront distribution. </li>\n<li>The Amazon Translate's API has free tier plan of 2 million characters per month, otherwise it cost about $15 for a million characters.</li>\n<li>Amazon Route 53 Registrar cost is about $15/year.</li>\n<li>CloudFront cost is related to the amount of traffic that is generated by user interactions and by the number of requests. Traffic has a monthly of $0.085 per GB, while requests have a monthly cost of 0,0120$ per 10000 requests, the price is zero if no one visits the site.</li>\n</ul>\n<p>The total cost of the solution is less than $4 per month.</p>\n<p> </p>",
            "image": "https://ggiallo28.github.io/blog/media/posts/10/hal-gatewood-tZc3vjPCk-Q-unsplash.jpg",
            "author": {
                "name": "Gianluigi Mucciolo"
            },
            "tags": [
                   "Guide"
            ],
            "date_published": "2020-06-23T20:49:48+02:00",
            "date_modified": "2020-06-23T20:49:48+02:00"
        },
        {
            "id": "https://ggiallo28.github.io/blog/do-you-automate/",
            "url": "https://ggiallo28.github.io/blog/do-you-automate/",
            "title": "Do you Automate?",
            "summary": "Do you like the assembly line? Do you like to perform repetitive tasks? Automation is going to cause unemployment. Really?&hellip;",
            "content_html": "<p>Do you like the assembly line? Do you like to perform repetitive tasks? Automation is going to cause unemployment. Really?  </p>\n<hr>\n<p>Automation is the technology by which a process is performed with minimal human assistance. When leaders describe how it will affect us, <span style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\">predictions typically fall into one of two camps. Optimists think that machines will bring human to do higher-value activities, while pessimists predict massive unemployment.</span></p>\n<p><div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/f3lUEnMaiAU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\"></iframe></div></p>\n<p>In both cases automation is considered as a double-edged sword. It can lower long-term costs and reduce maintenance but it can also be a huge investment, involve in loss of control and it can be a limit to innovation. </p>\n<blockquote>\n<p>If it works - don't touch it!</p>\n</blockquote>\n<p>Despite the gap between machines and humans is getting tighter and tighter I do not agree with the idea about replacing humans with automation, it is better to talk of Augmentation.</p>\n<p>Augmentation is about expanding the capabilities of individuals but it does not follows the empirical rule of \"lift and shift\" that measures success according to the reduction in only labor costs. The Augmentation can make individuals better at their jobs without affecting the employment of their colleagues.</p>\n<blockquote>\n<p>Machines do it a lot, Humans do it better!</p>\n</blockquote>\n<p>There are many factors to consider when you have to choose if a task should be automated or not. Just because you can automate it, doesn't mean you should.</p>\n<h5>What Operations to automate</h5>\n<p>Repetitive tasks that are more prone to human errors should be automated, which will reduce the chance of errors. For example, in the field of Cloud Computing, the use of Infrastructure as Code can help in resources provisioning and documentation activities. Those are very recurring tasks, the Automation helps to remove manually performed operations that usually introduce bugs that are hard to discover and fix. </p>\n<p>IT operations that are boring, recurring and easy to solve. This will help in reducing the manual effort and also will complete the task with high level of efficiency.</p>\n<p>Operations that would be executed for longer period, operations which are more stable and are prone to less changes in the functionality.</p>\n<p>Tasks that requires constant monitoring, we can log execution and monitor them later. This also reduce the chances of errors, even if go through bunches of logs or spreadsheets is not a very frequent task it makes sense to automate it.</p>\n<h5>What Operations not to Automate</h5>\n<p>For sure you don't need to automate operations that you will only run once. The only exception to this rule is when the operation you have to do is too complex to perform manually. Automate processes that have a short-term scope will result in more efforts in the automation than in the process itself.</p>\n<p>Today the primary limitation is the cost-effectiveness of automating a solution, so if automation increases a lot the cost of the operation you should not automate it. </p>\n<p>Operations that require manual intervention or validation by the human, operation in which adapting inputs to structured formats is very hard, should not be automated as the return on investment for the automation will always be less.</p>\n<p>Very unstable and prone to changes operations should not be automated because they are very hard to test.</p>\n<figure class=\"post_center_image\"><img loading=\"lazy\"  src=\"https://ggiallo28.github.io/blog/media/posts/9/amleto_con_teschio.jpg\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/9/responsive/amleto_con_teschio-xs.jpg 300w ,https://ggiallo28.github.io/blog/media/posts/9/responsive/amleto_con_teschio-sm.jpg 480w ,https://ggiallo28.github.io/blog/media/posts/9/responsive/amleto_con_teschio-md.jpg 768w\"  alt=\"\" width=\"489\" height=\"406\"></figure>\n<p>Implement an Automation can be very complex task, to get the best value out of automation the scope and use case of an automation solution must be fully developed and understood before you can rely on it. It can be a black box but must produce predictable and reliable results in order to define pass and fail conditions.</p>\n<p>Automation relies on either being able to control for inputs or being able to handle errors. An automation solution might crash when something goes wrong, but it might also silently fail and continue.</p>\n<p class=\"align-center\"><strong>We need to know when the automation is not functioning as expected.</strong></p>\n<p>You need to monitor your automated processes. Try to simplify the problem, easy problems are good candidates to automate, they provide an easy way to test the effectiveness of automation and are easier to check for errors and monitor.</p>\n<figure class=\"post_center_image\" ><img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/9/ai101-2.jpg\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/9/responsive/ai101-2-xs.jpg 300w ,https://ggiallo28.github.io/blog/media/posts/9/responsive/ai101-2-sm.jpg 480w ,https://ggiallo28.github.io/blog/media/posts/9/responsive/ai101-2-md.jpg 768w\"  alt=\"Image by Dreamstime\" width=\"600\" height=\"400\">\n<figcaption >Image by Dreamstime</figcaption>\n</figure>\n<p>Automation is to avoid boring and repetitive tasks that would generate little value if carried out by a human. Borrowing a concept from software engineering, the target is to be DRY. Don't repeat yourself. This philosophy aims to reduce repetition by using abstractions to avoid redundancy. The DRY principle is stated as \"Every piece of knowledge must have a single, unambiguous, authoritative representation within a system\". Violations to this principle are commonly taken as \"waste of everyone's time\".</p>\n<p>Automation can be powerful, automation can be efficient but automation is not automagic, a process can be carried out automatically in such a clever way that the result appears to be magic but in reality, it is not.</p>\n<p class=\"align-center\"><strong>There are a lot of people involved in making automation, so better  to talk about Augmentation.</strong></p>",
            "image": "https://ggiallo28.github.io/blog/media/posts/9/franck-v-U3sOwViXhkY-unsplash.jpg",
            "author": {
                "name": "Gianluigi Mucciolo"
            },
            "tags": [
                   "Automation"
            ],
            "date_published": "2020-06-23T20:49:48+02:00",
            "date_modified": "2020-06-23T20:49:48+02:00"
        },
        {
            "id": "https://ggiallo28.github.io/blog/initial-commit/",
            "url": "https://ggiallo28.github.io/blog/initial-commit/",
            "title": "Initial Commit",
            "summary": "What is the purpose of the blog? Why it was created? The post is about answers that change over time.",
            "content_html": "<p>What is the purpose of the blog? Why it was created? The post is about answers that change over time. </p>\n<hr>\n<p><span data-preserver-spaces=\"true\">Hello, I am Gianluigi, passionate in Artificial Intelligence, Cloud Technologies and sometimes I like to contribute to Open Source. </span></p>\n<p>I got my master’s degree in Computer Science at the University Of Salerno. Salerno is a city located in the south of Italy. I live in Cilento, one of the most beautiful and wild areas of Campania.</p>\n<figure class=\"post__image post_center_image\" ><img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/8/101400142_2907208436001105_1909684099233087488_o-2.jpg\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/8/responsive/101400142_2907208436001105_1909684099233087488_o-2-xs.jpg 300w ,https://ggiallo28.github.io/blog/media/posts/8/responsive/101400142_2907208436001105_1909684099233087488_o-2-sm.jpg 480w ,https://ggiallo28.github.io/blog/media/posts/8/responsive/101400142_2907208436001105_1909684099233087488_o-2-md.jpg 768w\"  alt=\"Photo by Angelo Vitolo\" width=\"1920\" height=\"1080\">\n<figcaption >Photo by <a href=\"https://www.facebook.com/angelo.vitolo.7\" target=\"_blank\" rel=\"noopener noreferrer\">Angelo Vitolo</a></figcaption>\n</figure>\n<p><span data-preserver-spaces=\"true\">I spent three month at </span><em><span data-preserver-spaces=\"true\">Technische Universität of Wien</span></em><span data-preserver-spaces=\"true\"> where I wrote my master thesis in Computer Vision about <a href=\"https://www.semanticscholar.org/paper/Analysis-and-Calibration-of-a-Mirror-Setup-%2C-Videos-Mucciolo-Koneczny/7b123c0a2dc75ab7e468e212c123952840faf14d\" target=\"_blank\" rel=\"noopener noreferrer\">Analysis and Calibration of a Mirror Setup producing Mirror-reflected, Multiview-videos</a>.</span></p>\n<p><span data-preserver-spaces=\"true\">Currently, I'm employed since 2017 at </span><em><span data-preserver-spaces=\"true\">Claranet Srl</span></em><span data-preserver-spaces=\"true\">, where I work as Cloud Solution Architect and Data Scientist. I carry out the migration, the definition of new infrastructures, monitoring, and maintenance of solutions, together with machine learning and big data activities. I have many years of experience in the use of Agile and DevOps methodologies.</span></p>\n<p>In 2018 I became an <span data-translate=\"false\">AWS Trainer</span> and I start to deliver classes in Architecting, Operations, Developing, Security, Databases, and Machine Learning on AWS.</p>\n<p><span data-preserver-spaces=\"true\">Despite my experience or preferences, I always try to keep up to date with other technology so that I can keep improving my knowledge and skills. I believe in always choosing the right tool for the job. I have a strong focus on automation and engineering best practices like CI / CD and Infrastructure as Code.</span></p>\n<p>I like to research, practice, and learn new things. This blog aims to gather my experiences and what I learn over time. It tells about travels, I like to discover new cultures and places. I also like business trips, they are a good opportunity to meet colleagues, learn new skills, and new ways of working.</p>\n<p><span data-preserver-spaces=\"true\">Here, I share slides of my public speeches and technical meetings, personal notes, and tips &amp; tricks about my interests. </span></p>\n<figure class=\"post__image post_center_image\" ><img loading=\"lazy\" src=\"https://ggiallo28.github.io/blog/media/posts/8/Schermata-2020-06-01-alle-21.19.53.png\" sizes=\"(max-width: 48em) 100vw, 100vw\" srcset=\"https://ggiallo28.github.io/blog/media/posts/8/responsive/Schermata-2020-06-01-alle-21.19.53-xs.png 300w ,https://ggiallo28.github.io/blog/media/posts/8/responsive/Schermata-2020-06-01-alle-21.19.53-sm.png 480w ,https://ggiallo28.github.io/blog/media/posts/8/responsive/Schermata-2020-06-01-alle-21.19.53-md.png 768w\"  alt=\"\" width=\"1920\" height=\"1080\">\n<figcaption >Speech at NOI Techpark Bozen</figcaption>\n</figure>\n<p><span data-preserver-spaces=\"true\">I'm driven by a deep conviction, I believe Technology should be a way to improve people's lives. I think that tech progress should be always aware of people. </span></p>\n<p><span data-preserver-spaces=\"true\">Here is where everything starts.</span></p>",
            "image": "https://ggiallo28.github.io/blog/media/posts/8/danielle-macinnes-IuLgi9PWETU-unsplash.jpg",
            "author": {
                "name": "Gianluigi Mucciolo"
            },
            "tags": [
                   "Where Everything Started",
                   "Talks",
                   "Guide",
                   "Automation"
            ],
            "date_published": "2020-06-23T20:49:48+02:00",
            "date_modified": "2020-06-23T20:49:48+02:00"
        }
    ]
}
